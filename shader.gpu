

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
uniform mat4 ModelViewProjectionMatrix;

void main() {
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
void main() {
    vec3 toLi =normalize(toL);
    vec3 toVi =normalize(toV);
    vec3 norm =normalize(nor);
    vec3 halfVector = normalize(toLi + toVi);
    float dotFromDirection = dot(toLi,-dir);
    float inLight = smoothstep(range-focus,range, dotFromDirection);
    float light = inLight * dot(norm, toLi);
    float specular = inLight * pow(dot(norm, halfVector), 100.0);
    gl_FragColor = vec4(color.rgb*light+specular,1.);
    //gl_FragColor = color;
    if(focus>10.){
        gl_FragColor = vec4(1.0);
    }
}`;